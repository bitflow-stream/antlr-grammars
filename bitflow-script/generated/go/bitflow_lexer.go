// Code generated from Bitflow.g4 by ANTLR 4.7.1. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 20, 152,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 3, 2,
	3, 2, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 3, 6, 3, 6, 3, 7, 3, 7, 3, 8,
	3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 10, 3, 10, 3, 11, 3,
	11, 3, 12, 3, 12, 3, 13, 3, 13, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 16,
	3, 16, 7, 16, 82, 10, 16, 12, 16, 14, 16, 85, 11, 16, 3, 16, 3, 16, 3,
	16, 7, 16, 90, 10, 16, 12, 16, 14, 16, 93, 11, 16, 3, 16, 3, 16, 3, 16,
	7, 16, 98, 10, 16, 12, 16, 14, 16, 101, 11, 16, 3, 16, 5, 16, 104, 10,
	16, 3, 17, 6, 17, 107, 10, 17, 13, 17, 14, 17, 108, 3, 18, 3, 18, 7, 18,
	113, 10, 18, 12, 18, 14, 18, 116, 11, 18, 3, 18, 5, 18, 119, 10, 18, 3,
	18, 5, 18, 122, 10, 18, 3, 19, 3, 19, 7, 19, 126, 10, 19, 12, 19, 14, 19,
	129, 11, 19, 3, 19, 3, 19, 3, 19, 3, 19, 3, 20, 3, 20, 3, 20, 5, 20, 138,
	10, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 5, 21, 145, 10, 21, 3, 21, 3,
	21, 3, 22, 3, 22, 3, 22, 3, 22, 5, 83, 91, 99, 2, 23, 3, 3, 5, 4, 7, 5,
	9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11, 21, 2, 23, 2, 25, 2, 27, 12,
	29, 13, 31, 14, 33, 15, 35, 16, 37, 17, 39, 18, 41, 19, 43, 20, 3, 2, 6,
	7, 2, 47, 60, 67, 92, 94, 94, 97, 97, 99, 124, 7, 2, 48, 60, 67, 92, 94,
	94, 97, 97, 99, 124, 3, 2, 50, 59, 4, 2, 12, 12, 15, 15, 2, 160, 2, 3,
	3, 2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11,
	3, 2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2,
	19, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2,
	2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2,
	2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2, 2, 2, 3, 45, 3, 2, 2, 2, 5, 47, 3, 2,
	2, 2, 7, 49, 3, 2, 2, 2, 9, 51, 3, 2, 2, 2, 11, 53, 3, 2, 2, 2, 13, 55,
	3, 2, 2, 2, 15, 57, 3, 2, 2, 2, 17, 64, 3, 2, 2, 2, 19, 66, 3, 2, 2, 2,
	21, 68, 3, 2, 2, 2, 23, 70, 3, 2, 2, 2, 25, 72, 3, 2, 2, 2, 27, 74, 3,
	2, 2, 2, 29, 76, 3, 2, 2, 2, 31, 103, 3, 2, 2, 2, 33, 106, 3, 2, 2, 2,
	35, 121, 3, 2, 2, 2, 37, 123, 3, 2, 2, 2, 39, 137, 3, 2, 2, 2, 41, 144,
	3, 2, 2, 2, 43, 148, 3, 2, 2, 2, 45, 46, 7, 125, 2, 2, 46, 4, 3, 2, 2,
	2, 47, 48, 7, 127, 2, 2, 48, 6, 3, 2, 2, 2, 49, 50, 7, 63, 2, 2, 50, 8,
	3, 2, 2, 2, 51, 52, 7, 42, 2, 2, 52, 10, 3, 2, 2, 2, 53, 54, 7, 46, 2,
	2, 54, 12, 3, 2, 2, 2, 55, 56, 7, 43, 2, 2, 56, 14, 3, 2, 2, 2, 57, 58,
	7, 121, 2, 2, 58, 59, 7, 107, 2, 2, 59, 60, 7, 112, 2, 2, 60, 61, 7, 102,
	2, 2, 61, 62, 7, 113, 2, 2, 62, 63, 7, 121, 2, 2, 63, 16, 3, 2, 2, 2, 64,
	65, 7, 93, 2, 2, 65, 18, 3, 2, 2, 2, 66, 67, 7, 95, 2, 2, 67, 20, 3, 2,
	2, 2, 68, 69, 9, 2, 2, 2, 69, 22, 3, 2, 2, 2, 70, 71, 9, 3, 2, 2, 71, 24,
	3, 2, 2, 2, 72, 73, 7, 47, 2, 2, 73, 26, 3, 2, 2, 2, 74, 75, 7, 61, 2,
	2, 75, 28, 3, 2, 2, 2, 76, 77, 7, 47, 2, 2, 77, 78, 7, 64, 2, 2, 78, 30,
	3, 2, 2, 2, 79, 83, 7, 36, 2, 2, 80, 82, 11, 2, 2, 2, 81, 80, 3, 2, 2,
	2, 82, 85, 3, 2, 2, 2, 83, 84, 3, 2, 2, 2, 83, 81, 3, 2, 2, 2, 84, 86,
	3, 2, 2, 2, 85, 83, 3, 2, 2, 2, 86, 104, 7, 36, 2, 2, 87, 91, 7, 41, 2,
	2, 88, 90, 11, 2, 2, 2, 89, 88, 3, 2, 2, 2, 90, 93, 3, 2, 2, 2, 91, 92,
	3, 2, 2, 2, 91, 89, 3, 2, 2, 2, 92, 94, 3, 2, 2, 2, 93, 91, 3, 2, 2, 2,
	94, 104, 7, 41, 2, 2, 95, 99, 7, 98, 2, 2, 96, 98, 11, 2, 2, 2, 97, 96,
	3, 2, 2, 2, 98, 101, 3, 2, 2, 2, 99, 100, 3, 2, 2, 2, 99, 97, 3, 2, 2,
	2, 100, 102, 3, 2, 2, 2, 101, 99, 3, 2, 2, 2, 102, 104, 7, 98, 2, 2, 103,
	79, 3, 2, 2, 2, 103, 87, 3, 2, 2, 2, 103, 95, 3, 2, 2, 2, 104, 32, 3, 2,
	2, 2, 105, 107, 9, 4, 2, 2, 106, 105, 3, 2, 2, 2, 107, 108, 3, 2, 2, 2,
	108, 106, 3, 2, 2, 2, 108, 109, 3, 2, 2, 2, 109, 34, 3, 2, 2, 2, 110, 118,
	5, 21, 11, 2, 111, 113, 5, 21, 11, 2, 112, 111, 3, 2, 2, 2, 113, 116, 3,
	2, 2, 2, 114, 112, 3, 2, 2, 2, 114, 115, 3, 2, 2, 2, 115, 117, 3, 2, 2,
	2, 116, 114, 3, 2, 2, 2, 117, 119, 5, 23, 12, 2, 118, 114, 3, 2, 2, 2,
	118, 119, 3, 2, 2, 2, 119, 122, 3, 2, 2, 2, 120, 122, 5, 25, 13, 2, 121,
	110, 3, 2, 2, 2, 121, 120, 3, 2, 2, 2, 122, 36, 3, 2, 2, 2, 123, 127, 7,
	37, 2, 2, 124, 126, 10, 5, 2, 2, 125, 124, 3, 2, 2, 2, 126, 129, 3, 2,
	2, 2, 127, 125, 3, 2, 2, 2, 127, 128, 3, 2, 2, 2, 128, 130, 3, 2, 2, 2,
	129, 127, 3, 2, 2, 2, 130, 131, 5, 39, 20, 2, 131, 132, 3, 2, 2, 2, 132,
	133, 8, 19, 2, 2, 133, 38, 3, 2, 2, 2, 134, 138, 9, 5, 2, 2, 135, 136,
	7, 15, 2, 2, 136, 138, 7, 12, 2, 2, 137, 134, 3, 2, 2, 2, 137, 135, 3,
	2, 2, 2, 138, 139, 3, 2, 2, 2, 139, 140, 8, 20, 2, 2, 140, 40, 3, 2, 2,
	2, 141, 145, 7, 34, 2, 2, 142, 143, 7, 94, 2, 2, 143, 145, 7, 117, 2, 2,
	144, 141, 3, 2, 2, 2, 144, 142, 3, 2, 2, 2, 145, 146, 3, 2, 2, 2, 146,
	147, 8, 21, 2, 2, 147, 42, 3, 2, 2, 2, 148, 149, 7, 11, 2, 2, 149, 150,
	3, 2, 2, 2, 150, 151, 8, 22, 2, 2, 151, 44, 3, 2, 2, 2, 14, 2, 83, 91,
	99, 103, 108, 114, 118, 121, 127, 137, 144, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'{'", "'}'", "'='", "'('", "','", "')'", "'window'", "'['", "']'",
	"';'", "'->'", "", "", "", "", "", "", "'\t'",
}

var lexerSymbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "EOP", "PIPE", "STRING", "NUMBER",
	"NAME", "COMMENT", "NEWLINE", "WHITESPACE", "TAB",
}

var lexerRuleNames = []string{
	"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8",
	"START_LETTER", "END_LETTER", "SINGLE_DASH", "EOP", "PIPE", "STRING", "NUMBER",
	"NAME", "COMMENT", "NEWLINE", "WHITESPACE", "TAB",
}

type BitflowLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewBitflowLexer(input antlr.CharStream) *BitflowLexer {

	l := new(BitflowLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Bitflow.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// BitflowLexer tokens.
const (
	BitflowLexerT__0       = 1
	BitflowLexerT__1       = 2
	BitflowLexerT__2       = 3
	BitflowLexerT__3       = 4
	BitflowLexerT__4       = 5
	BitflowLexerT__5       = 6
	BitflowLexerT__6       = 7
	BitflowLexerT__7       = 8
	BitflowLexerT__8       = 9
	BitflowLexerEOP        = 10
	BitflowLexerPIPE       = 11
	BitflowLexerSTRING     = 12
	BitflowLexerNUMBER     = 13
	BitflowLexerNAME       = 14
	BitflowLexerCOMMENT    = 15
	BitflowLexerNEWLINE    = 16
	BitflowLexerWHITESPACE = 17
	BitflowLexerTAB        = 18
)
